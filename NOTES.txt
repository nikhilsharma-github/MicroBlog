Blog1: 
- Creating a Virtual Environment:
python3 -m venv envName

- Activate the Environment:
$ venv\Scripts\activate

- Setting up environment variable for our flask app 
export FLASK_APP=microblog.py

- To run our flask app 
flask run

-setting flask debug mode 
set FLASK_DEBUG=0 or 1




Chapter 5:
Werkzeug is used for password hashing technique.
>>> from werkzeug.security import generate_password_hash
>>> hash=generate_password_hash("foobar")
>>> hash
>>> check_password_hash(hash, 'foobar') TRUE


Chapter 6: part-vi-profile-page-and-avatars

Avatars:
A. Creating a profile page and adding an avatar, will use Gravatar which will take the email has value for a dynamic image generation  
Ex:
>>> from hashlib import md5
>>> 'https://www.gravatar.com/avatar/' + md5(b'john@example.com').hexdigest()
'https://www.gravatar.com/avatar/d4c74594d841139328695756648b6bd6'

B. Added the subtemplate _post.html 
C. Added the Edit Profile section. 
D. Flask migration 
flask db migrate -m "Added two new fields in User Model: about_me and last_seen"
flask db upgrade
E. Added before_request for updating the last_seen column for user 
F. Added the Edit Profile Form in the Forms.py with 3 fields as of now. 


Chapter 7: Error Handling.
- Using Flask Debugger for debugging the code.
A. Adding Custom Error Pages 404.html and 500.html. 
B. Setting up the Email Configuration for showing the Errors(Didn't work up).
C. Setting up File Logger for the Debugging, it will save .log file and save the logs.  
D. Set the FLASK_DEBUG as default true or 1 in .flaskenv file. 


Chapter 8: Adding Followers
- For Implementing Followers and Followed, we can't simply use RD tables as we need many to many relationship, so for that we need an association table. 
- Added a new Association table for maintaining followers and following count.
- Added followers and following methods to find out count of following, followers, follow unfollow etc.
- Added method to query many to many relationship DB for retrieving user, post and follower and their posts results  
- Utilizing unittest package to test out our DB model, added tests.py file for testing our functionalities. 


Chapter 9: Adding Posts from the DB and explore Page, and Pagination.
- Showing the posts from the DB now on the profile. 
- Adding the explore section to look for other people's posts. 
- Adding the Pagination on Posts on Explore and Profile Page.

Chapter 10: Adding Email Support for Password Reset. 
- Using Brevo SMTP Service for Free Email Service.
- Implemented JWT for resetting link. 
- Added Password Reset Link in the Reset Password Mail using JWT Authentication. 

Chapter 11: Added Bootstrap Flask Framework for CSS Changes.
- Added Bootstrap and its implementation specifically based for Flask apps using Macros.
- Created a separate file bootstrap_wtf.html which handles the various forms UI using Macros in Python

Chapter 12: Solving UTC to the local time for the Users using Flask-Moment(Moment.js for Flask).
- Utilized Moment.js + flask_moment package to reformat the Date from UTC to local timezone for post and user profile sections. 



#### DATABASE ACCESS:
Temp User Credentials:
username: Alice
password: Alice@123

# Start with running python first 
-- importing the app 
>>> from flaskapp import app, db
>>> from flaskapp.models import User, Post
>>> import sqlalchemy as sa

-- Pushing the app context 
>>> app.app_context().push()

-- Adding the User 
u = User(username="alice", email="alice@example.com")
db.session.add(u)
db.session.commit()
u 


--Querying the DB
>>> query = sa.select(User)
>>> users = db.session.scalars(query).all()
>>> users
or 
>>> users = db.session.scalars(query)
>>> for u in users:
...     print(u.id, u.username)

Query based on the parameter, like id:
>>> u = db.session.get(User, 1)
>>> u
<User susan>

Adding a Blog post: 
>>> u = db.session.get(User, 1)
>>> p = Post(body='my first post!', author=u)
>>> db.session.add(p)
>>> db.session.commit()

>>> # print post author and body for all posts
>>> query = sa.select(Post)
>>> posts = db.session.scalars(query)
>>> for p in posts:
...     print(p.id, p.author.username, p.body)
...
1 john my first post!

# get all users in reverse alphabetical order
>>> query = sa.select(User).order_by(User.username.desc())
>>> db.session.scalars(query).all()
[<User susan>, <User john>]

# get all users that have usernames starting with "s"
>>> query = sa.select(User).where(User.username.like('s%'))
>>> db.session.scalars(query).all()
[<User susan>]

# Pagination 
>>> query = sa.select(Post).order_by(Post.timestamp.desc())
>>> posts = db.paginate(query, page=1, per_page=20, error_out=False).items



### BULK INSERTION IN DB FROM SCRATCH:

from flaskapp import app, db
from flaskapp.models import User, Post
import sqlalchemy as sa
app.app_context().push()
query = sa.select(User)
users = db.session.scalars(query).all()
users


USERS SHOULD BE CREATED FROM REGISTRATION METHOD(So that we can login later on)
u = User(username="alice", email="alice@example.com")
db.session.add(u)
db.session.commit()

u = User(username="bob", email="bob@example.com")
db.session.add(u)  
db.session.commit()

u = User(username="clara", email="clara@example.com")
db.session.add(u)  
db.session.commit()

u = User(username="daisy", email="daisy@example.com")
db.session.add(u)  
db.session.commit()


(Inserting Posts for the Registered Users)
u = db.session.get(User, 1)
p = Post(body='Weather is Good!', author=u)
db.session.add(p)
db.session.commit()
p = Post(body='Traffic is High!', author=u)
db.session.add(p)
db.session.commit()

u = db.session.get(User, 2)
p = Post(body='Life is Good!', author=u)
db.session.add(p)
db.session.commit()
p = Post(body='Life Sucks!', author=u)
db.session.add(p)
db.session.commit()

u = db.session.get(User, 3)
p = Post(body='Need to Sleep!', author=u)
db.session.add(p)
db.session.commit()
p = Post(body='Sleep is Life!', author=u)
db.session.add(p)
db.session.commit()

u = db.session.get(User, 4)
p = Post(body='The power of Now!', author=u)
db.session.add(p)
db.session.commit()
p = Post(body='Now is everything!', author=u)
db.session.add(p)
db.session.commit()

query = sa.select(Post)
posts = db.session.scalars(query)
for p in posts:
    print(p.id, p.author.username, p.body)    